{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/environment/Stock-Byte-App/stockbyte-app/app/javascript/components/Pages/stock.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from \"react\";\n\nvar Stock = /*#__PURE__*/function (_React$Component) {\n  _inherits(Stock, _React$Component);\n\n  var _super = _createSuper(Stock);\n\n  function Stock(props) {\n    var _this;\n\n    _classCallCheck(this, Stock);\n\n    _this = _super.call(this, props);\n\n    _this.getCurrentPrice = function () {\n      var symbol = _this.props.match.params.symbol;\n      fetch(\"https://api.twelvedata.com/price?symbol=\".concat(symbol, \"&apikey=bc07ae0baa6241d79c88764a862a7dba\")).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(function (result) {\n        _this.setState({\n          currentPrice: result.price\n        });\n      });\n    };\n\n    _this.getStockInfo = function () {\n      fetch(\"http://localhost:3000/stocks?portfolio=default\").then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(function (result) {\n        _this.getStock(result);\n      });\n    };\n\n    _this.getStock = function (stockList) {\n      var symbol = _this.props.match.params.symbol;\n      var id = 0;\n      stockList.forEach(function (stock) {\n        if (stock.symbol === symbol) {\n          id = stock.id;\n        }\n      });\n\n      if (id > 0) {\n        fetch(\"http://localhost:3000/stocks/\".concat(id, \"?portfolio=default\")).then(function (response) {\n          if (response.status === 200) {\n            return response.json();\n          }\n        }).then(function (result) {\n          _this.setState({\n            average_price: result.average_price,\n            total_quantity: result.total_quantity\n          });\n        });\n      }\n    };\n\n    _this.state = {\n      currentPrice: null,\n      average_price: null,\n      total_quantity: null,\n      stockList: []\n    };\n\n    _this.getCurrentPrice();\n\n    _this.getStockInfo();\n\n    return _this;\n  }\n\n  _createClass(Stock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getCurrentPrice();\n      this.getStockInfo();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var symbol = this.props.match.params.symbol;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, \"Stock Placeholder\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, symbol, \" current price is \", this.state.currentPrice), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, symbol, \" average holding price is \", this.state.average_price), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, symbol, \" quantity is \", this.state.total_quantity));\n    }\n  }]);\n\n  return Stock;\n}(React.Component);\n\nexport default Stock;","map":{"version":3,"sources":["/home/ubuntu/environment/Stock-Byte-App/stockbyte-app/app/javascript/components/Pages/stock.js"],"names":["React","Stock","props","getCurrentPrice","symbol","match","params","fetch","then","response","status","json","result","setState","currentPrice","price","getStockInfo","getStock","stockList","id","forEach","stock","average_price","total_quantity","state","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nclass Stock extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      currentPrice:null,\n      average_price:null,\n      total_quantity:null,\n      stockList:[]\n      }\n    this.getCurrentPrice()\n    this.getStockInfo()\n    }\n  componentDidMount(){\n    this.getCurrentPrice()\n    this.getStockInfo()\n    }\n  getCurrentPrice = () => {\n    const { symbol } = this.props.match.params\n    fetch(`https://api.twelvedata.com/price?symbol=${symbol}&apikey=bc07ae0baa6241d79c88764a862a7dba`)\n    .then((response)=>{\n     if(response.status === 200){\n       return(response.json())\n     }\n   })\n   .then((result)=>{\n     this.setState({\n       currentPrice: result.price\n     })\n   })\n  }\n  getStockInfo = () => {\n    fetch(`http://localhost:3000/stocks?portfolio=default`)\n      .then((response)=>{\n        if(response.status === 200){\n          return(response.json())\n        }\n      })\n      .then((result)=>{\n        this.getStock(result)\n      })\n }\n  getStock = (stockList) => {\n    const { symbol } = this.props.match.params\n    let id = 0\n    stockList.forEach((stock)=>{\n      if(stock.symbol === symbol){\n        id = stock.id\n      }\n    })\n    if(id > 0){\n      fetch(`http://localhost:3000/stocks/${id}?portfolio=default`)\n     .then((response)=>{\n       if(response.status === 200){\n         return(response.json())\n       }\n     })\n     .then((result)=>{\n       this.setState({\n         average_price: result.average_price,\n         total_quantity: result.total_quantity\n        })\n     })\n     }\n  }\n\n  render () {\n\n    const { symbol } = this.props.match.params\n    return (\n      <React.Fragment>\n          <h2>Stock Placeholder</h2>\n          <p>{ symbol } current price is { this.state.currentPrice }</p>\n          <p>{ symbol } average holding price is { this.state.average_price }</p>\n          <p>{ symbol } quantity is { this.state.total_quantity }</p>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Stock\n"]},"metadata":{},"sourceType":"module"}